"=============================================================================
" Description: MY vimrc with dozens of scripts, for Linux/Windows, GUI/Console
"              Originally from MetaCosm's http://vi-improved.org/vimrc.php
"
" Last Change: 0 14/05/2006 23:36:39 Leal@RAINT:_vimrc
"
" Author:      Leal <linxiao.li AT gmail DOT com>
"              Get latest vimrc from http://www.leal.cn/
"
" Version:     1.0065
"
" Usage:       1. Prepare necessary dirs and files.
"
"              $VIMDATA         X:\Vim\vimdata on Win, ~/vimdata on Linux
"               |
"               |-- temp        to put swap files <DIR>
"               |-- backup      to put backup files <DIR>
"               |-- diary       to save calendar.vim's diaries <DIR>
"               |-- GetLatest   to save GetLatestVimScripts.vim's <DIR>
"               |      |
"               |      `-- GetLatestVimScripts.dat   to store GLVS's items
"               |
"               |-- _vim_fav_files   to store favmenu.vim's items
"               `-- _vim_mru_files   to store mru.vim's items
"
"              2. Get all scripts you favor on www.vim.org, better with GLVS.
"
"              3. Get all needed utilities, especially on Windows, e.g.
"              wget  -- WGET for Windows  http://users.ugent.be/~bpuype/wget/
"              ctags -- Exuberant Ctags   http://ctags.sf.net/
"
"              4. If have no idea of some option, just press K (<S-k>) on it.
"
"              5. HTML file is produced with :TOhtml, with colo default.
"
"=============================================================================

"-----------------------------------------------------------------------------
" general
"-----------------------------------------------------------------------------
set nocompatible        " use vim as vim, should be put at the very start
set history=100         " lines of Ex-mode commands, search history
set browsedir=buffer    " use directory of the related buffer for file browser
set clipboard+=unnamed  " use clipboard register '*' for all y, d, c, p ops
set viminfo+=!          " make sure it can save viminfo
set isk+=$,%,#,-,@,_    " none of these should be word dividers
set confirm             " raise a dialog confirm whether save changed buffer
set ffs=unix,dos,mac    " favor unix, which behaves good under Linux/Windows
set fenc=utf-8          " default fileencoding
set fencs=utf-8,ucs-bom,euc-jp,gb18030,gbk,gb2312,cp936
map Q gq
                        " do not use Ex-mode, use Q for formatting
filetype on             " enable file type detection
filetype plugin on      " enable loading the plugin for appropriate file type

"-----------------------------------------------------------------------------
" colors
"-----------------------------------------------------------------------------
"colorscheme evening
colorscheme darkblue
set background=dark     " use a dark background
"set background=darkblue     " use a dark background
syntax on               " syntax highlighting

"-----------------------------------------------------------------------------
" gui-only settings
"-----------------------------------------------------------------------------
"if has("gui_running")
"  colo inkpot           " colorscheme, inkpot.vim
"  set lines=55          " window tall and wide, only if gui_running,
"  set columns=160       " or vim under console behaves badly
"endif

"-----------------------------------------------------------------------------
" Vim UI
"-----------------------------------------------------------------------------
set linespace=1         " space it out a little more (easier to read)
set wildmenu            " type :h and press <Tab> to look what happens
set ruler               " always show current position along the bottom
set cmdheight=2         " use 2 screen lines for command-line
set lazyredraw          " do not redraw while executing macros (much faster)
set number              " don't print line number
set hid                 " allow to change buffer without saving
set backspace=2         " make backspace work normal
set whichwrap+=<,>,h,l  " allow backspace and cursor keys to wrap
"set mouse=a             " use mouse in all modes
set shortmess=atI       " shorten messages to avoid 'press a key' prompt
set report=0            " tell us when anything is changed via :...
set fillchars=vert:\ ,stl:\ ,stlnc:\
                        " make the splitters between windows be blank

"-----------------------------------------------------------------------------
" visual cues
"-----------------------------------------------------------------------------
set showmatch           " show matching paren
set matchtime=5         " 1/10 second to show the matching paren
set hlsearch            " do not highlight searched for phrases
set incsearch           " BUT do highlight where the typed pattern matches
set scrolloff=3         " minimal number of screen lines to keep above/below the cursor
set novisualbell        " use visual bell instead of beeping
set noerrorbells        " do not make noise
set laststatus=2        " always show the status line
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$ " how :set list show
"set statusline=%{VimBuddy()}\ %F%m%r%h%w\ [%{&ff}]\ [%Y]\ [\%03.3b\ \%02.2B]\ [%02v\ %03l\ %L\ %p%%]
                        " need vimbuddy.vim, dislike it? just remove it

"-----------------------------------------------------------------------------
" text formatting/layout
"-----------------------------------------------------------------------------
set ai                  " autoindent
set si                  " smartindent
set cindent             " do C-style indenting
set fo=tcrqn            " see help (complex)
set tabstop=2           " tab spacing
set softtabstop=2       " unify it
set shiftwidth=2        " unify it
set expandtab         " real tabs please!
set smarttab            " use tabs at the start of a line, spaces elsewhere
set nowrap                " do not wrap lines
set formatoptions+=mM   " thus vim can reformat multibyte text (e.g. Chinese)

"Mr. Wu
"set expandtab 
"set tabstop=2 
"set softtabstop=2 
"set shiftwidth=2

" When editing a file, always jump to the last known cursor position. 
" Don't do it when the position is invalid or when inside an event handler 
" (happens when dropping a file on gvim). 
autocmd BufReadPost * 
\ if line("'\"") > 0 && line("'\"") <= line("$") | 
\ exe "normal g`\"" | 
\ endif 

"-----------------------------------------------------------------------------
" folding
"-----------------------------------------------------------------------------
"set foldenable          " turn on folding
"set foldmethod=indent   " make folding indent sensitive
"set foldlevel=100       " don't autofold anything, but can still fold manually
"set foldopen -=search   " don't open folds when you search into them
"set foldopen -=undo     " don't open folds when you undo stuff

"set guifont=Monospace\ 11
"set guifont=Liberation_Mono:h12:cANSI
"set guifont=Arial_monospaced_for_SAP:h9:cANSI

set tags=/home/qhyang/workspace/procise0.2_fe/tags    " ctag configuration.
"set wrap
set showcmd
set nobackup
set cmdheight=1
set ignorecase smartcase
set iskeyword=a-z,A-Z,48-57,_
set timeoutlen=500        " See also 'timeout' and 'ttimeout'.
"set background=black
set guifont=Courier\ 10\ Pitch\ 13
set cursorline

set tags=/home/qhyang/workspace/procise0.2_fe/tags

inoremap <ESC> <ESC>:w<CR>
inoremap <ESC><ESC> <ESC>
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap HH <left>
inoremap LL <right>
inoremap {{ {<CR>}<ESC>O
nnoremap q :q<CR>
nnoremap Q :q!<CR>
nnoremap z $
vnoremap z $
nnoremap 5 %
vnoremap 5 %
nnoremap 3 #
nnoremap 8 *
nnoremap bs :%s/
nnoremap <F2> gf<C-o>:sp #<CR>
nnoremap <C-s> :w<CR>
nnoremap <C-q> :wq<CR>
nnoremap fh <C-w>h 
nnoremap fj <C-w>j 
nnoremap fk <C-w>k 
nnoremap fl <C-w>l 
nnoremap <C-x> "*p
nnoremap <C-a> ggVG
nnoremap dt :diffthis<CR>
nnoremap vb <C-v>
nnoremap dz d$
nnoremap fn :bn<CR>
nnoremap fp :bp<CR>
nnoremap <F5> :e<CR>G
vnoremap <C-c> "*y
vnoremap cc <C-v>I
vnoremap c <C-v>
vnoremap <TAB> 2>
vnoremap <TAB><TAB> 4>
vnoremap <S-TAB> 2<
vnoremap <S-TAB><S-TAB> 4<
nnoremap <TAB> V>
nnoremap <S-TAB> V<
nnoremap bsb :%s/^\n//<CR>
" For tags.
nnoremap tn :tnext<CR>
nnoremap tp :tprevious<CR>
nnoremap tf :tfirst<CR>
nnoremap tl :tlast<CR>
nnoremap <C-l> zL
nnoremap <C-h> zH
nnoremap nd ]c

let g:AutoComplPop_NotEnableAtStartup = 0   " AutoComplPop configuration.
let g:AutoComplPop_IgnoreCaseOption = 1 
autocmd FileType c,cpp,pl,java,l set guifont=Courier\ 10\ Pitch\ 13   " '\' for space.
"autocmd FileType c,cpp set guifont=Courier\ 12
"autocmd GUIEnter * simalt ~x 
set lines=999 columns=999

" Search for selected text, forwards or backwards.
" http://vim.wikia.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" A smarter brace completer
"function! AutoPair(open, close)
"  let line = getline('.')
"  if col('.') > strlen(line) || line[col('.') - 1] == ' '
"    return a:open.a:close."\<ESC>i"
"  else
"    return a:open
"  endif
"endf
"
"function! ClosePair(char)
"  if getline('.')[col('.') - 1] == a:char
"    return "\<Right>"
"  else
"    return a:char
"  endif
"endf
"
"inoremap ( <c-r>=AutoPair('(', ')')<CR>
"inoremap ) <c-r>=ClosePair(')')<CR>
"
" ctags -R --languages=c++ -fields=+iaKSz --c++-kinds=+px --extra=+q  --exclude=build --exclude=db --exclude=doc --exclude=lib --exclude=obj --exclude=release --exclude=test --exclude=verify --exclude=svn --exclude=reference  .
